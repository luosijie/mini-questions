<template>
  <view>
    <swiper class="cards" bindchange="swiperChange" current="{{ current }}">
      <!-- 全局配置 -->
      <swiper-item>
        <view class="card config">
          <textarea type="text" maxlength="12" auto-height="true" wx:model="{{ formData.title }}"  placeholder="请输入题卡名称"/>
        </view>
      </swiper-item>
      <swiper-item wx:for="{{ formData.cards }}" wx:key="id" wx:for-item="card">
        <view class="card">
          <!-- 标题 -->
          <input type="text" maxlength="12" class="title" value="{{ card.title }}" placeholder="请输入标题" bindblur="titleChange"/>
          <!-- 选项 -->
          <view
            class="option"
            wx:for="{{ card.options }}"
            wx:key="id"
            wx:for-item="option"
            wx:for-index="optionIndex"
          >
            <!-- 移除选项 -->
            <i class="remove iconfont icon-remove" bindtap="removeOption(optionIndex)"></i>
            <!-- 选项标题 -->
            <input type="text" maxlength="12" value="{{ option.value }}" placeholder="请输入选项标题" bindblur="optionTitleChange(optionIndex, $event)"/>
            <!-- 正确选项 -->
            <view class="correct" bindtap="setCorrect(index, optionIndex)">
              <i class="check iconfont icon-check" wx:if="{{ card.correct === optionIndex }}"></i>
            </view>
          </view>
          <!-- 新增 -->
          <view class="add-option" wx:if="{{ card.options.length < 4 }}" bindtap="addOption">新增选项</view>
        </view>
      </swiper-item>
      <swiper-item>
        <view class="card" bindtap="addCard">
          <view class="new-card">
            <i class="iconfont icon-new-card"></i>
          </view>
        </view>
      </swiper-item>
    </swiper>
    <view class="controls">
      <view class="ps">
        <block wx:if="{{ current < formData.cards.length + 1 && current > 0 }}">
          <view class="tip">
            点击选项右边标记正确答案
          </view>
          <i class="delete-card iconfont icon-clear" bindtap="deleteCard" wx:if="{{ current > 1 }}"></i>
        </block>
      </view>
      <view class="swip">
        <view class="pre iconfont icon-pre" bindtap="pre"></view>
        <view class="current">
          <block wx:if="{{ current === 0 }}">
            题卡配置
          </block>
          <block wx:elif="{{ current < formData.cards.length + 1 }}">
            第{{ current }}/{{ formData.cards.length }}题
          </block>
          <block wx:else>
            新增题目
          </block>
        </view>
        <view class="next iconfont icon-next" bindtap="next"></view>
      </view>
      <view class="generate" bindtap="generate">生成</view>
    </view>
  </view>
</template>

<script>
  import { createPage } from '@mpxjs/core'
  createPage({
    data: {
      current: 0,
      formData: {
        title: '',
        cards: []
      }
    },
    onLoad () {
      this.formData.cards = []
      const card = this.generateCard()
      this.formData.cards.push(card)
    },
    methods: {
      // 生成选项
      generateOption (id) {
        return {
          id,
          value: ''
        }
      },
      // 生成一个起始题目
      generateCard () {
        const id = new Date().getTime()
        const card = {
          id,
          title: '',
          options: [
            this.generateOption(id + 1),
            this.generateOption(id + 2),
            this.generateOption(id + 3),
            this.generateOption(id + 4)
          ],
          correct: 0
        }
        return card
      },
      addCard () {
        const card = this.generateCard()
        this.formData.cards.push(card)
      },
      swiperChange (e) {
        this.current = e.detail.current
      },
      // 切换上一题
      pre () {
        if (this.current > 0) {
          this.current--
        }
      },
      // 切换下一题目
      next () {
        if (this.current < this.formData.cards.length + 1) {
          this.current++
          console.log('cards:', this.formData)
        }
      },
      // 移除选项
      removeOption (index) {
        const options = this.formData.cards[this.current - 1].options
        if (options.length < 3) {
          wx.showToast({
            title: '至少保留2个选项',
            icon: 'none'
          })
          return
        }
        options.splice(index, 1)
      },
      // 新增选项
      addOption () {
        const options = this.formData.cards[this.current - 1].options
        const option = this.generateOption(new Date().getTime())
        options.push(option)
      },
      // 删除卡片
      deleteCard () {
        console.log('delete')
        if (this.formData.cards.length < 2) {
          wx.showToast({
            title: '不能再删了',
            icon: 'none'
          })
          return
        }
        wx.showModal({
          title: '提示',
          content: '确定删除该题目吗',
          confirmColor: '#40A9FF',
          success: () => {
            this.formData.cards.splice(this.current - 1, 1)
            console.log('删除卡片', this.formData.cards)
          }
        })
      },
      titleChange (e) {
        this.formData.cards[this.current - 1].title = e.detail.value
        console.log('e', this.formData.cards)
      },
      optionTitleChange (index, e) {
        const options = this.formData.cards[this.current - 1].options
        options[index].value = e.detail.value
      },
      // 校验题卡表单
      validateForm () {
        if (!this.formData.title) {
          wx.showToast({
            title: '题卡名称未填写',
            icon: 'none'
          })
          return false
        }
        for (let i = 0; i < this.formData.cards.length; i++) {
          const card = this.formData.cards[i]
          if (!card.title) {
            wx.showToast({
              title: `第${i + 1}道题 标题未填写`,
              icon: 'none'
            })
            return false
          }
          // 校验选项标题填写情况
          for (let j = 0; j < card.options.length; j++) {
            const option = card.options[j]
            if (!option.value) {
              wx.showToast({
                title: `第${i + 1}道题 选项未完善`,
                icon: 'none'
              })
              return false
            }
          }
        }
        return true
      },
      // 设置正确选项
      setCorrect (index, optionIndex) {
        const card = this.formData.cards[index]
        card.correct = optionIndex
        this.$set(this.formData.cards, index, card)
      },
      async generate () {
        const valid = this.validateForm()
        if (!valid) return
        wx.showLoading({
          title: '处理中...',
          mask: true
        })
        const res = await wx.cloud.callFunction({
          name: 'questionAdd',
          data: this.formData
        })
        if (res.result.success) {
          wx.showToast({
            title: '创建成功',
            icon: 'success'
          })
          // 跳转到投票详情页
          setTimeout(() => {
            wx.redirectTo({
              url: `detail-entry?_id=${res.result._id}`
            })
          }, 1500)
        }
      }
    }
  })
</script>

<script type="application/json">
  {
    "navigationBarTitleText": "创建题卡",
    "navigationBarBackgroundColor": "#40A9FF",
    "usingComponents": {
    }
  }
</script>
<style lang="less" scoped>
@import url('../assets/font/iconfont.css');
.cards {
  // background: red;
  height: 70vh;
  position: relative;
  swiper-item {
    padding: 40rpx 20rpx;
    box-sizing: border-box;
  }

  .card {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    border: 2rpx solid #eee;
    border-radius: 16rpx;
    padding: 20rpx;
    width: 100%;
    height: 100%;
    font-weight: bold;

    &.config {
      justify-content: center;
      align-items: center;
      font-size: 38rpx;
      textarea {
        text-align: center;
      }
    }
    .title {
      margin: 40rpx 0;
    }
    
    i.remove {
      color: #EF590F;
      font-size: 40rpx;
      margin-right: 10rpx;
    }
    .option {
      display: flex;
      align-items: center;
      position: relative;
      overflow: hidden;
      input {
        flex-grow: 1;
        border: 2rpx solid #eee;
        height: 100rpx;
        border-radius: 8rpx;
        padding-left: 10rpx;
        padding-right: 100rpx;
        margin: 20rpx 0;
      }
      .correct {
        height: 100rpx;
        width: 100rpx;
        position: absolute;
        right: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        .check {
          color: #40A9FF;
          font-size: 36rpx;
        }
      }
    }
    .add-option {
      font-size: 24rpx;
      font-weight: normal;
      color: #999;
      text-align: center;
    }
    .new-card {
      color: #ccc;
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      i {
        font-size: 100rpx;
      }
    }
  }
}
.controls {
  display: flex;
  // justify-content: center;
  align-items: center;
  width: 100vw;
  height: 30vh;
  flex-direction: column;
  position: relative;
  .ps {
    height: 90rpx;
    text-align: center;
    .tip {
      color: #CCCCCC;
      font-size: 24rpx;
      margin-top: 0;
      margin-bottom: 10rpx;
    }
    .delete-card {
      color: #999;
    }
  }
  .swip {
    padding: 40rpx 20rpx;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: space-between;
    .pre, .next {
      border-radius: 50%;
      color: #eee;
      width: 100rpx;
      height: 100rpx;
      font-size: 100rpx;
    }
    .current {
      color: #999;
      font-size: 32rpx;
      font-weight: bold;
    }
  }
  .generate {
    height: 86rpx;
    width: 270rpx;
    border-radius: 43rpx;
    background: #40A9FF;
    font-size: 35rpx;
    font-weight: bold;
    text-align: center;
    line-height: 86rpx;
    color: white;
  }
}
</style>
